#include <stdio.h>
#include <stdlib.h>

#define MAX 100

struct Queue {
    int items[MAX];
    int front;
    int rear;
};

struct Queue* createQueue() {
    struct Queue* q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = -1;
    q->rear = -1;
    return q;
}

int isEmpty(struct Queue* q) {
    return q->rear == -1;
}

void enqueue(struct Queue* q, int value) {
    if (q->rear == MAX - 1)
        printf("\nQueue is Full!!");
    else {
        if (q->front == -1)
            q->front = 0;
        q->rear++;
        q->items[q->rear] = value;
    }
}

int dequeue(struct Queue* q) {
    int item;
    if (isEmpty(q)) {
        printf("Queue is empty");
        item = -1;
    } else {
        item = q->items[q->front];
        q->front++;
        if (q->front > q->rear) {
            q->front = q->rear = -1;
        }
    }
    return item;
}

void bfs(int adjMatrix[][MAX], int startNode, int numNodes) {
    struct Queue* q = createQueue();
    int visited[MAX] = {0};

    visited[startNode] = 1;
    enqueue(q, startNode);

    printf("BFS Traversal: ");

    while (!isEmpty(q)) {
        int currentNode = dequeue(q);
        printf("%d ", currentNode);

        for (int i = 0; i < numNodes; i++) {
            if (adjMatrix[currentNode][i] == 1 && !visited[i]) {
                visited[i] = 1;
                enqueue(q, i);
            }
        }
    }
    printf("\n");
}

void dfs(int adjMatrix[][MAX], int startNode, int numNodes, int visited[]) {
    printf("%d ", startNode);
    visited[startNode] = 1;

    for (int i = 0; i < numNodes; i++) {
        if (adjMatrix[startNode][i] == 1 && !visited[i]) {
            dfs(adjMatrix, i, numNodes, visited);
        }
    }
}

int main() {
    int numNodes;
    int adjMatrix[MAX][MAX];
    int visited[MAX];

    printf("Enter the number of nodes: ");
    scanf("%d", &numNodes);

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < numNodes; i++) {
        for (int j = 0; j < numNodes; j++) {
            scanf("%d", &adjMatrix[i][j]);
        }
    }

    int startNode;
    printf("Enter the starting node for BFS and DFS: ");
    scanf("%d", &startNode);

    bfs(adjMatrix, startNode, numNodes);

    for (int i = 0; i < numNodes; i++) {
        visited[i] = 0;
    }

    printf("DFS Traversal: ");
    dfs(adjMatrix, startNode, numNodes, visited);
    printf("\n");

    return 0;
}
